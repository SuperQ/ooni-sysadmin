#!/bin/bash
#
# Ability to execute arbituary docker commands equals to root-shell, so this
# script does some whitelisting.  The script should be launched with:
#
#   sudo --non-interactive /foo/bar/trampoline.sh \
#         do-something-awesome.py \
#         "{{ ds }}" \
#         "{{ execution_date.isoformat() }}" \
#         "{{ (execution_date + dag.schedule_interval).isoformat() }}" \
#         other CLI arguments to script

# FIXME: 1000 = `id -u benchmark` at the datacollector dom0
uidno=1000

script="$1"
bucket="$2"
isofrom="$3" # execution_date
isotill="$4" # execution_date + schedule_interval
shift 4

(
shopt -s extglob
for var in "$bucket" "$isofrom" "$isotill"; do
    # NB: `.` (dot) delimits microseconds in isoformat() but they are not welcome here
    if [ -z "$var" -o -n "${var/+([-0-9T:])/}" ]; then
        echo "$0: bad arg <$var> -> <${var/+([-0-9T:])/}>" 1>&2
        exit 1
    fi
done
) || exit 1

docksafe="--rm --interactive --read-only"
docknet="--network none"

priv=/data/ooni/private
pub=/data/ooni/public
volargs=""
case "$script" in
    # FIXME: it's file-based polling as I'm a bit afraid of upgrading 1.7.1.3
    # to 1.8.0 right now and HTTP-based polling is broken (network failure is
    # treated as success).
    is-reports-raw-ready)
    exec docker run $docksafe --network none "--volume=${priv}/reports-raw-ready:${priv}/reports-raw-ready:ro" debian:jessie \
        /bin/bash -c "test -f ${priv}/reports-raw-ready/${bucket} && exit 42 || exit 13"
    # NB: no fallthrough
    ;;

    canning.py)
    docker run $docksafe --network none -v=${priv}/canned:${priv}/canned debian:jessie /bin/bash -c "mkdir -p ${priv}/canned/${bucket} && chown $uidno ${priv}/canned/${bucket}"
    volargs="${volargs} --volume=${priv}/reports-raw/${bucket}:${priv}/reports-raw/${bucket}:ro"
    volargs="${volargs} --volume=${priv}/canned/${bucket}:${priv}/canned/${bucket}:rw"
    ;;

    autoclaving.py)
    docker run $docksafe --network none -v=${pub}/autoclaved:${pub}/autoclaved debian:jessie /bin/bash -c "mkdir -p ${pub}/autoclaved/${bucket} && chown $uidno ${pub}/autoclaved/${bucket}"
    volargs="${volargs} --volume=${priv}/bridge_db:${priv}/bridge_db:ro"
    volargs="${volargs} --volume=${priv}/canned/${bucket}:${priv}/canned/${bucket}:ro"
    volargs="${volargs} --volume=${pub}/autoclaved/${bucket}:${pub}/autoclaved/${bucket}:rw"
    ;;

    centrifugation.py)
    docker run $docksafe --network none -v=${pub}/simhash:${pub}/simhash debian:jessie /bin/bash -c "chown $uidno ${pub}/simhash"
    volargs="${volargs} --volume=${pub}/autoclaved/${bucket}:${pub}/autoclaved/${bucket}:ro"
    volargs="${volargs} --volume=${pub}/simhash:${pub}/simhash:rw"
    docknet="--net af_default --link af_oometa_1:metadb" # FIXME:too hardcoded
    ;;

    *)
    echo "$0: unknown script <$script>" 1>&2
    exit 1
    ;;
esac

set -o xtrace

# FIXME: hardcoded uid of the `benchmark` user at `datacollector`
exec docker run $docksafe --user "$uidno" $docknet ${volargs} ooni/shovel:latest "/usr/local/bin/$script" --start "$isofrom" --end "$isotill" "$@"
